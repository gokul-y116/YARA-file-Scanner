import os
import hashlib
import yara
import json
import requests
from datetime import datetime

# Path to the folder with YARA rules
YARA_RULES_PATH = './yara_rules/custom_rules.yar'
# Path to the folder with vulnerability signatures
VULN_SIGNATURES_PATH = './vuln_signatures/cve_signatures.json'

# Function to calculate the hash of a file
def calculate_file_hash(file_path):
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

# Function to scan for malware using YARA rules
def scan_for_malware(file_path):
    try:
        rules = yara.compile(filepath=YARA_RULES_PATH)
        matches = rules.match(file_path)
        if matches:
            malware_info = []
            for match in matches:
                malware_info.append(f"Match: {match.rule} - {match.namespace}")
            return malware_info
        else:
            return None
    except yara.YaraSyntaxError as e:
        return f"YARA rule syntax error: {e}"

# Function to scan for known vulnerabilities using signature-based approach
def scan_for_vulnerabilities(file_path):
    try:
        with open(VULN_SIGNATURES_PATH, 'r') as vuln_file:
            vulnerabilities = json.load(vuln_file)
        
        file_hash = calculate_file_hash(file_path)
        if file_hash in vulnerabilities:
            return f"Vulnerability detected: {vulnerabilities[file_hash]}"
        else:
            return None
    except FileNotFoundError:
        return "Vulnerability signature file not found."
    except json.JSONDecodeError as e:
        return f"Error reading vulnerability signature file: {e}"

# Function to check if the file is valid and exists
def check_file_exists(file_path):
    if not os.path.exists(file_path):
        return False, "The file does not exist."
    if not os.path.isfile(file_path):
        return False, "The path is not a valid file."
    return True, None

# Function to scan a file
def scan_file(file_path):
    is_valid, error_message = check_file_exists(file_path)
    if not is_valid:
        return {"error": error_message}

    scan_results = {
        "file": file_path,
        "timestamp": str(datetime.now()),
        "malware": scan_for_malware(file_path),
        "vulnerabilities": scan_for_vulnerabilities(file_path),
    }

    return scan_results

# Function to update vulnerability signatures
def update_vulnerability_signatures():
    try:
        response = requests.get("https://example.com/vulnerability-signatures")
        if response.status_code == 200:
            with open(VULN_SIGNATURES_PATH, 'w') as file:
                json.dump(response.json(), file)
            return "Vulnerability signatures updated successfully."
        else:
            return "Failed to update vulnerability signatures."
    except requests.RequestException as e:
        return f"Request error while updating signatures: {e}"
